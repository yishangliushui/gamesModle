启动后日志位置：C:/Users/{你的用户名}/Documents/Klei/DoNotStarveTogether/client_log.txt


--[[ Encoding Tips ]]--[[ 编码小贴士 ]]
--------------------------------------------------------------------------

--[[ Follower组件讲解 Tip:
    ▷ inst.entity:AddFollower() 使用这个添加该组件
    ▷ inst.Follower:FollowSymbol(owner.GUID, "swap_object", nil, nil, nil, true, nil, 0, 3)
        1、参数分别为 实体ID，跟随通道名，偏移量x，偏移量y，偏移量z，是否替换贴图位置，未知，默认贴图下标，连续替换的贴图下标
        2、例子中的意思就是 inst 这个实体跟随 owner 的 swap_object 通道，并替换位置 0到3 的通道内贴图
    ▷ inst.Follower:FollowSymbol(owner.GUID, "swap_body", nil, nil, nil, true, nil, 5)
        1、例子中的意思就是 inst 这个实体跟随 owner 的 swap_body 通道，并替换位置为 5 的通道内贴图
        2、如果最后两个参数都不填写，就代表把所有位置的贴图都替换掉
    ▷ inst.Follower:StopFollowing() 让 inst 停止跟随通道
]]--

--[[ RPC使用讲解 Tip:
    !!!所有参数建议弄成数字类型或者字符类型

    【客户端发送请求给服务器】SendModRPCToServer(GetModRPC("LegionMsg", "operate"), 参数2, 参数3, ...)
    【服务器监听与响应请求】
        AddModRPCHandler("LegionMsg", "operate", function(player, 参数2, ...) --第一个参数固定为发起请求的玩家
            --做你想做的
        end)

    【服务端发送请求给客户端】SendModRPCToClient(GetClientModRPC("LegionMsg", "operate"), 玩家ID, 参数2, 参数3, ...)
    --若 玩家ID 为table，则服务端会向table里的全部玩家ID都发送请求
    【客户端监听与响应请求】
        AddClientModRPCHandler("LegionMsg", "operate", function(参数2, ...) --通过 ThePlayer 确定客户端玩家
            --做你想做的
        end)
]]--

--[[ 给玩家实体增加已有皮肤获取与管理机制 Tip：
    TheNet:GetIsMasterSimulation()  --是否为服务器世界(主机+云服)
    TheNet:GetIsServer()            --是否为主机世界(玩家本地电脑开的，既跑进程，也要运行ui)
    TheNet:IsDedicated()            --是否为云服世界(只跑进程，不运行ui)
    TheShard:IsSecondary()          --是否为副世界(所以，not TheShard:IsSecondary() 就能确定是主世界了)
    TheShard:GetShardId()           --获取当前世界的ID

    世界分为3种
        1、主世界(运行主服务器代码，与客户端通信)、
        2、副世界(运行副服务器代码，与客户端通信)、
        3、客户端世界(运行客户端代码，与当前所处的服务器世界通信)
    例如，1个玩家用本地电脑开无洞穴存档，则世界有主世界(与房主客户端世界是同一个)、客户端(其他玩家的各有一个)。
        开了含洞穴的本地存档或云服存档，则世界有主世界(主机或云服)、洞穴世界(副世界)、客户端(所有玩家各有一个)
    modmain会在每个世界都加载一次

    TheWorld.ismastersim        --是否为服务器世界(主机+云服。本质上就是 TheNet:GetIsMasterSimulation())
    TheWorld.ismastershard      --是否为主世界(本质上就是 TheWorld.ismastersim and not TheShard:IsSecondary())
    TheNet:GetIsServer() or TheNet:IsDedicated() --是否为非客户端世界，这个是最精确的判定方式
    not TheNet:IsDedicated()    --这个方式也能判定客户端，但是无法排除客户端和服务端为一体的世界的情况
]]--

--------------------------------------------------------------------------
--[[ Globals ]]--[[ 全局 ]]
--------------------------------------------------------------------------

--下行代码只代表查值时自动查global，增加global的变量或者修改global的变量时还是需要带"GLOBAL."
GLOBAL.setmetatable(env, { __index = function(t, k) return GLOBAL.rawget(GLOBAL, k) end })
local _G = GLOBAL






御坂十七号-正版清纯美少女
(1)这个qq群里的群文件
(2)龙飞的饥荒mod教程链接:
https://zhuanlan.zhihu.com/p/570258953
(3)官方论坛的教程提供网页链接:forums.kleientertainment.com/profile/350174-rezecib/
(4)勿言的视频教程:https://space.bilibili.com/23698445?from=search&seid=6644108394665516184
https://isnullptr.cn
(5)其余教程:
https://www.zhihu.com/people/xingxing_2014/posts
https://atjiu.github.io/dstmod-tutorial/#/
https://www.dstmod.com/component/
https://n77a3mjegs.feishu.cn/docx/K9bUdpb5Qo85j2xo8XkcOsU1nuh?from=from_copylink


饥荒mod功能代码实现：物品自动收纳
1. 注册按键事件，当按下特定键时执行函数。
2. 获取玩家物品栏中的所有物品，遍历这些物品
3. 查找周围的容器，需要用TheSim:FindEntities或类似的方法，根据位置和半径搜索
4. 对于每个物品，判断是否有对应的容器可以存放
5. 如果有对应的容器，将物品移动到该容器中，需要处理堆叠逻辑，比如先尝试合并已有堆叠，再放入空位
6、物品移动到箱子或容器有一个移动的过程
7、物品移动到箱子后容器的位置后，箱子或容器触发打开动画
8、物品都放入成功后，箱子或容器触发关闭动画

